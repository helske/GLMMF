{
    "contents" : "load(\"kmodel.rda\")\nlibrary(KFAS)\napp<-approxSSM(kmodel)\nout<-KFS(app,simpl=F,filtering=\"state\")\n\nvt<-Ft<-matrix(0,28,12)\nKt<-array(0,c(14,12,28))\nPt<-array(0,c(14,14,13,29))\nat<-array(0,c(14,13,29))\nyt<-app$y\nZ<-app$Z\nTt<-app$T[,,1]\nQt<-diag(c(rep(0,12),1,1))\nPt[,,1,1]<-diag(c(rep(1e7,12),1,1))\n\nfor(t in 1:28){\n  for(i in 1:12){\n    vt[t,i]<-yt[t,i]-Z[i,,t]%*%at[,i,t]\n    Ft[t,i]<-t(Z[i,,t])%*%Pt[,,i,t]%*%(Z[i,,t]) + app$H[i,i,t]\n    Kt[,i,t]<- Pt[,,i,t]%*%(Z[i,,t])\n    \n    at[,i+1,t]<-at[,i,t]+Kt[,i,t]/Ft[t,i]*vt[t,i]\n    Pt[,,i+1,t]<-Pt[,,i,t] - Kt[,i,t]%*%t(Kt[,i,t])/Ft[t,i]   \n    \n    \n  }\n\n    at[,1,t+1]<-Tt%*%(at[,13,t])\n    Pt[,,1,t+1]<-Tt%*%(Pt[,,13,t])%*%t(Tt) + Qt \n\n}\n\nall.equal(out$a[29,1:12],out$alpha[28,1:12])\nall.equal(out$a[29,],at[,1,29],check.attributes=FALSE)\nall.equal(out$a[20,],at[,1,20],check.attributes=FALSE)\n\napp2<-app\napp2$a1[1:12]<-out$alpha[28,1:12]\napp2$P1inf[]<-0\nout2<-KFS(app2,simpl=F,filtering=\"state\")\n\nall.equal(out$alpha,out2$alpha) #true\nout2$K\nall.equal(t(app$Z[,,28])%*%solve(app$Z[,,28]%*%out2$P[,,28]%*%t(app$Z[,,28])+app$H[,,28])%*%app$Z[,,28],out2$N[,,28],\n          check.attributes=FALSE)\n\nt<-10\nTt<-app$T[,,1]\nFinv<-solve(app$Z[,,t]%*%out2$P[,,t]%*%t(app$Z[,,t])+app$H[,,t])\nL<-diag(14)-out2$K[,,t]%*%Finv%*%app$Z[,,t] #toinen termi on nolla ei-faktoreille\nt(Tt)%*%out2$N[,,t]%*%Tt #nolla faktoreille\nall.equal(t(L)%*%t(Tt)%*%out2$N[,,t]%*%Tt%*%L,t(Tt)%*%out2$N[,,t]%*%Tt)\n\nall.equal(t(L)%*%t(Tt)%*%out2$N[,,t]%*%Tt%*%L)\nall.equal(out2$N[,,t-1],t(app$Z[,,t])%*%solve(app$Z[,,t]%*%out2$P[,,t]%*%t(app$Z[,,t])+app$H[,,t])%*%app$Z[,,t]+\n            t(L)%*%t(Tt)%*%out2$N[,,t]%*%Tt%*%L,t(Tt)%*%out2$N[,,t]%*%Tt)\n\nt<-20\nFinv<-solve(app$Z[,,t]%*%out2$P[,,t]%*%t(app$Z[,,t])+app$H[,,t])\nL<-diag(14)-out2$K[,,t]%*%Finv%*%app$Z[,,t]\nall.equal(t(app$Z[,,t])%*%solve(app$Z[,,t]%*%out2$P[,,t]%*%t(app$Z[,,t])+app$H[,,t])%*%app$Z[,,t]+\n            t(L)%*%t(Tt)%*%out2$N[,,t+1]%*%Tt%*%L,out2$N[,,t],\n          check.attributes=FALSE)\n\nFinv<-solve(app$Z[,,t]%*%out2$P[,,t]%*%t(app$Z[,,t])+app$H[,,t])\nall.equal(t(app$Z[,,t])%*%Finv%*%app$Z[,,t]+\n            t(Tt)%*%out2$N[,,t+1]%*%Tt,out2$N[,,t],\n          check.attributes=FALSE) ## EI TARVITA K:TA, PELKKÄ F ja P riittää!!\nall.equal(out2$N[,,t],out$N[,,t]) #NOT TRUE, eli tarvitaan kuitenkin:\nFinv<-solve(app$Z[,,t]%*%out$P[,,t]%*%t(app$Z[,,t])+app$H[,,t])\nall.equal(t(app$Z[,,t])%*%Finv%*%app$Z[,,t]+\n            t(Tt)%*%out$N[,,t+1]%*%Tt,out$N[,,t],\n          check.attributes=FALSE)\n\nFinv<-solve(app$Z[,,t]%*%out$P[,,t]%*%t(app$Z[,,t])+app$H[,,t])\nL<-diag(14)-out$K[,,t]%*%Finv%*%app$Z[,,t]\nr<-t(app$Z[,,t])%*%Finv%*%out$v[t,]+t(L)%*%t(Tt)%*%out$r[,t+1]\nout$r[,t]\nc(r)\nout$alpha[t+1,]\nTt%*%out$alpha[t,]+app$R[,,1]%*%diag(2)%*%t(app$R[,,1])%*%out$r[,t+1]\n\n###\nL<-diag(14)-out$K[,,t]%*%Finv%*%app$Z[,,t]\nr<-t(app$Z[,,t])%*%Finv%*%out$v[t,]+t(L)%*%t(Tt)%*%out$r[,t+1]\nout$r[,t]\nc(r)\nout$alpha[t+1,]\nTt%*%out$alpha[t,]+app$R[,,1]%*%diag(2)%*%t(app$R[,,1])%*%out$r[,t+1]\n##\nall.equal(out$F,out2$F)\n",
    "created" : 1413969834836.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1995673838",
    "id" : "BF7D5260",
    "lastKnownWriteTime" : 1413973526,
    "path" : "U:/MyPrograms/gitrepos/GLMMF/RfilterDebug.R",
    "project_path" : "RfilterDebug.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}