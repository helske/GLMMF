{
    "contents" : "grfn<-function(pars,model,estimate=TRUE,env=parent.frame()){      \n  if(ndisp>0){        \n    model$u[]<-matrix(exp(pars[1:ndisp]),n,p,byrow=TRUE)\n  }\n  if(nr>0){\n    if(any(exp(pars[ndisp+1:nr])>1e5)) #mixing with fixed effects\n      return(.Machine$double.xmax)\n    P1<-diag(exp(pars[ndisp+1:nr]))\n    \n    model$P1[(nf+nc+nd+1):m,(nf+nc+nd+1):m]<-\n      as.matrix(.bdiag(replicate(p,P1,simplify=FALSE)))\n  }\n  if(nf>0){\n    Z<-matrix(0,nrow=p,ncol=nf)\n    Z[lower.tri(Z,TRUE)]<-pars[(ndisp+nr+1):length(pars)]\n    model$Z[1:nf,1:p,]<-t(Z)\n  }\n  if(estimate){        \n    if(itertheta)\n      theta <-get(\"prevtheta\",envir=env)\n    \n    res<-expfLogLikNoSim(model$y, model$Z, model$u, model$a1, model$P1, model$P1inf, \n                         dist, model$tol, maxiter, maxiter2, convtol, theta, model$Zind, model$nfactors,trace,1)\n    if(dist>1){\n      res$theta[res$theta>5]<-5\n      res$theta[res$theta< -5]<- -5\n    }\n    assign(\"prevtheta\",res$theta,envir=env)\n    if(res$conv<0){\n      warning(\"Approximating algorithm did not converge.\")\n      lik<- 0                 \n    } else lik <- -res$gradient[lower.tri(res$gradient,TRUE)]\n    lik\n  }else model\n}\n\ngrad(likfn,inits,model=model,env=env,method.args=list(r=6))-grfn(inits,model=model,env=env)\nfit<-optimx(par=inits,fn=likfn,gr=grfn,model=model,env=env,control=list(maxit=1000,trace=3),method=\"BFGS\"\n            ,hess=hessfn)\n\nhess<-hessian(likfn,inits,model=model,env=env,method.args=list(r=6))\n\nhessfn<-function(pars,model,env){\n  hessian(likfn,pars,model=model,env=env,method.args=list(r=6))\n}\n",
    "created" : 1414832177068.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "308431302",
    "id" : "299B785E",
    "lastKnownWriteTime" : 1414785362,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled3"
    },
    "source_on_save" : false,
    "type" : "r_source"
}