initfactors <- initfactors_list[[which.max(res)]]
f1<-glmmf(group=group,response=response,common.fixed=common.fixed,distinct.fixed=distinct.fixed,random=random,
nfactors=nfactors,data=data,
distribution=distribution,
u=u, correlating.effects=correlating.effects, common.dispersion=common.dispersion, init.random.cov=init.random.cov,
init.dispersion=init.dispersion, init.factor=initfactors,init.theta=init.theta,
return.model=return.model,maxiter=maxiter,maxiter2=maxiter2, convtol=convtol,estimate=F,tol=tol,trace=1,...)
f<-glmmf(group=group,response=response,common.fixed=common.fixed,distinct.fixed=distinct.fixed,random=random,
nfactors=nfactors,data=data,
distribution=distribution,
u=u, correlating.effects=correlating.effects, common.dispersion=common.dispersion, init.random.cov=init.random.cov,
init.dispersion=init.dispersion, init.factor=initfactors,
return.model=return.model,maxiter=maxiter,maxiter2=maxiter2, convtol=convtol,estimate=F,tol=tol,trace=2,method="BFGS",control=list(trace=1,REPORT=1,maxit=2))
f<-glmmf(group=group,response=response,common.fixed=common.fixed,distinct.fixed=distinct.fixed,random=random,
nfactors=nfactors,data=data,
distribution=distribution,
u=u, correlating.effects=correlating.effects, common.dispersion=common.dispersion, init.random.cov=init.random.cov,
init.dispersion=init.dispersion, init.factor=initfactors,init.theta=f1$linear.predictor,
return.model=return.model,maxiter=maxiter,maxiter2=maxiter2, convtol=convtol,estimate=F,tol=tol,trace=2,method="BFGS",control=list(trace=1,REPORT=1,maxit=2))
f<-glmmf(group=group,response=response,common.fixed=common.fixed,distinct.fixed=distinct.fixed,random=random,
nfactors=nfactors,data=data,
distribution=distribution,
u=u, correlating.effects=correlating.effects, common.dispersion=common.dispersion, init.random.cov=init.random.cov,
init.dispersion=init.dispersion, init.factor=initfactors,init.theta=f1$linear.predictor,
return.model=return.model,maxiter=maxiter,maxiter2=maxiter2, convtol=convtol,estimate=T,tol=tol,trace=2,method="BFGS",control=list(trace=1,REPORT=1,maxit=2))
f1$logLik
f1<-glmmf(group=group,response=response,common.fixed=common.fixed,distinct.fixed=distinct.fixed,random=random,
nfactors=nfactors,data=data,
distribution=distribution,
u=u, correlating.effects=correlating.effects, common.dispersion=common.dispersion, init.random.cov=init.random.cov,
init.dispersion=init.dispersion, init.factor=initfactors,init.theta=init.theta,
return.model=return.model,maxiter=maxiter,maxiter2=maxiter2, convtol=convtol,estimate=FALSE,tol=tol,trace=1,...)
print(f1$logLik)
f1<-glmmf(group=group,response=response,common.fixed=common.fixed,distinct.fixed=distinct.fixed,random=random,
nfactors=nfactors,data=data,
distribution=distribution,
u=u, correlating.effects=correlating.effects, common.dispersion=common.dispersion, init.random.cov=init.random.cov,
init.dispersion=init.dispersion, init.factor=initmat,init.theta=init.theta,
return.model=return.model,maxiter=maxiter,maxiter2=maxiter2, convtol=convtol,estimate=FALSE,tol=tol,trace=1,...)
print(f1$logLik)
debugSource('U:/MyPrograms/gitrepos/GLMMF/R/parallel_glmmf.R')
source('U:/MyPrograms/gitrepos/GLMMF/R/parallel_glmmf.R')
assign
?assign
?get
for(i in list(a=1:3,b=1:5)) print(i)
?icount
library(foreach)
?icount
?foreach
?iter
iter(list(a=1:3,b=1:5))
library(iterators)
iter(list(a=1:3,b=1:5))
library(GLMMF)
rm(parallel_glmmf)
dat = read.csv("born.csv")
X = dat[,2:4] #remove id column
Y = dat[,-(1:4)]
#remove rare species:
Y = as.matrix(Y[,apply(Y>0,2,sum)>10])
Xdat<-do.call(rbind, replicate(ncol(Y), X, simplify=FALSE)) # 5069  3
species<-rep(colnames(Y),each=nrow(Y))
borneodata<-data.frame(c(Y),Xdat,species)
names(borneodata)<-c("abundance",colnames(Xdat),"species")
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="poisson",maxiter=100,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=T)
prevtheta
theta
prevtheta<-theta
itertheta
itertheta<-TRUE
theta2<-theta
f<-likfn(inits,model,TRUE)
inits
identical(theta2,itertheta)
identical(theta2,theta)
res<-expfLogLikNoSim(model$y, model$Z, model$u, model$a1, model$P1, model$P1inf,
dist, model$tol, maxiter, maxiter2, convtol, theta, model$Zind, model$nfactors,trace)
res<-expfLogLikNoSim(model$y, model$Z, model$u, model$a1, model$P1, model$P1inf,
dist, model$tol, maxiter, maxiter2, convtol, prevtheta, model$Zind, model$nfactors,trace)
fit<-optim(par=inits,fn=likfn,model=model,...)
fit<-optim(par=inits,fn=likfn,model=model,...)
?environment
env
env<-environment()
env
env$prevtheta<-prevtheta
env
ls(env)
env<-new.env()
env$prevtheta<-prevtheta
env
ls(env)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
fit<-optim(par=inits,fn=likfn,model=model,...)
?get
likfn<-function(pars,model,estimate=TRUE,env=parent.frame()){
if(ndisp>0){
model$u[]<-matrix(exp(pars[1:ndisp]),n,p,byrow=TRUE)
}
if(nr>0){
if(any(exp(pars[ndisp+1:nr])>1e5)) #mixing with fixed effects
return(.Machine$double.xmax)
P1<-diag(exp(pars[ndisp+1:nr]))
model$P1[(nf+nc+nd+1):m,(nf+nc+nd+1):m]<-
as.matrix(.bdiag(replicate(p,P1,simplify=FALSE)))
}
if(nf>0){
Z<-matrix(0,nrow=p,ncol=nf)
Z[lower.tri(Z,TRUE)]<-pars[(ndisp+nr+1):length(pars)]
model$Z[1:nf,1:p,]<-t(Z)
}
if(estimate){
if(ndisp>0 || is.null(init.theta)){
theta <- init_theta(model$y, model$u, model$distribution)
} else{
if(itertheta)
theta <-get("prevtheta",pos=env)
}
res<-expfLogLikNoSim(model$y, model$Z, model$u, model$a1, model$P1, model$P1inf,
dist, model$tol, maxiter, maxiter2, convtol, theta, model$Zind, model$nfactors,trace)
assign("prevtheta",res$theta,pos=env)
if(res$conv<0){
warning("Approximating algorithm did not converge.")
lik<- .Machine$double.xmax
} else lik <- -res$logLik
lik
}else model
}
fit<-optim(par=inits,fn=likfn,model=model,...)
fit<-optim(par=inits,fn=likfn,model=model,...)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
likfn<-function(pars,model,estimate=TRUE,env=parent.frame()){
if(ndisp>0){
model$u[]<-matrix(exp(pars[1:ndisp]),n,p,byrow=TRUE)
}
if(nr>0){
if(any(exp(pars[ndisp+1:nr])>1e5)) #mixing with fixed effects
return(.Machine$double.xmax)
P1<-diag(exp(pars[ndisp+1:nr]))
model$P1[(nf+nc+nd+1):m,(nf+nc+nd+1):m]<-
as.matrix(.bdiag(replicate(p,P1,simplify=FALSE)))
}
if(nf>0){
Z<-matrix(0,nrow=p,ncol=nf)
Z[lower.tri(Z,TRUE)]<-pars[(ndisp+nr+1):length(pars)]
model$Z[1:nf,1:p,]<-t(Z)
}
if(estimate){
if(ndisp>0 || is.null(init.theta)){
theta <- init_theta(model$y, model$u, model$distribution)
} else{
if(itertheta)
theta <-get("prevtheta",envir=env)
}
res<-expfLogLikNoSim(model$y, model$Z, model$u, model$a1, model$P1, model$P1inf,
dist, model$tol, maxiter, maxiter2, convtol, theta, model$Zind, model$nfactors,trace)
assign("prevtheta",res$theta,envir=env)
if(res$conv<0){
warning("Approximating algorithm did not converge.")
lik<- .Machine$double.xmax
} else lik <- -res$logLik
lik
}else model
}
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
itertheta
env$prevtheta
init.theta
init_theta
likfn<-function(pars,model,estimate=TRUE,env=parent.frame()){
if(ndisp>0){
model$u[]<-matrix(exp(pars[1:ndisp]),n,p,byrow=TRUE)
}
if(nr>0){
if(any(exp(pars[ndisp+1:nr])>1e5)) #mixing with fixed effects
return(.Machine$double.xmax)
P1<-diag(exp(pars[ndisp+1:nr]))
model$P1[(nf+nc+nd+1):m,(nf+nc+nd+1):m]<-
as.matrix(.bdiag(replicate(p,P1,simplify=FALSE)))
}
if(nf>0){
Z<-matrix(0,nrow=p,ncol=nf)
Z[lower.tri(Z,TRUE)]<-pars[(ndisp+nr+1):length(pars)]
model$Z[1:nf,1:p,]<-t(Z)
}
if(estimate){
if(itertheta)
theta <-get("prevtheta",envir=env)
res<-expfLogLikNoSim(model$y, model$Z, model$u, model$a1, model$P1, model$P1inf,
dist, model$tol, maxiter, maxiter2, convtol, theta, model$Zind, model$nfactors,trace)
assign("prevtheta",res$theta,envir=env)
if(res$conv<0){
warning("Approximating algorithm did not converge.")
lik<- .Machine$double.xmax
} else lik <- -res$logLik
lik
}else model
}
prevtheta<-theta
fit<-optim(par=inits,fn=likfn,model=model,...)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
theta <-init_theta(model$y, model$u, model$distribution)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
env<-new.env()
env$prevtheta<-theta
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
fit<-optim(par=inits,fn=likfn,model=model,env=env,...)
init_theta
plogis(100)
plogis(-100)
exp(100)
exp(-100)
exp(-50)
exp(-10)
exp(-15)
exp(15)
plogis(15)
plogis(-15)
plogis(-10)
plogis(10)
exp(10)
exp(-10)
exp(-5)
range(theta)
range(env$prevtheta)
exp(5)
x< - 5
2< -5
detach(package:GLMMF)
detach(package::GLMMF)
library("GLMMF", lib.loc="C:/Program Files/R/library")
detach("package:GLMMF", unload=TRUE)
library(GLMMF)
library(GLMMF)
library(GLMMF)
dat = read.csv("born.csv")
Y = dat[,-(1:4)]
X = dat[,2:4] #remove id column
#remove rare species:
Y = as.matrix(Y[,apply(Y>0,2,sum)>10])
Xdat<-do.call(rbind, replicate(ncol(Y), X, simplify=FALSE)) # 5069  3
species<-rep(colnames(Y),each=nrow(Y))
borneodata<-data.frame(c(Y),Xdat,species)
names(borneodata)<-c("abundance",colnames(Xdat),"species")
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="poisson",maxiter=100,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=T)
fitinit$log #-8241.699
initmat<-t(matrix(fitinit$coefs[,37],nrow=3)[2:3,])
library(GLMMF)
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="poisson",maxiter=100,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=T)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=100,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=T)
dnbinom
library(KFAS)
KFAS:::scaling
library(GLMMF)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=100,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=T)
library(GLMMF)
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=100,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=T)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=T)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
dnbinom(4,0.4966,mu=4,1)
dnbinom(4,size=0.4966,mu=4,log=TRUE)
dnbinom(x=4,size=0.4966,mu=4,log=TRUE)
dnbinom(x=4,size=0.4966,mu=exp(4),log=TRUE)
dnbinom(x=4,size=0.4966,mu=4,log=TRUE)
dnbinom
library(GLMMF)
.External(C_dnbinom_mu, x, size, mu, log)
.External("C_dnbinom_mu", x, size, mu, log)
.External("C_dnbinom_mu", 4, 0.4966, 4, 1)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
install.packages("inline")
library(inline)
?inline
## equivalent shorter form using rcpp()
fx <- rcpp(signature(x = "integer", y = "numeric"),
' return wrap( as<int>(x) * as<double>(y) ) ; ')
fx
fx()
fx(1,1)
## equivalent shorter form using rcpp()
fx <- rcpp(signature(x = "double", size = "double", mu = "double"),
' return R::dnbinom_mu( x, size, mu, 1); ')
## equivalent shorter form using rcpp()
fx <- rcpp(signature(x = "double", size = "double", mu = "double"),
' return wrap(R::dnbinom_mu( x, size, mu, 1)); ')
## equivalent shorter form using rcpp()
fx <- rcpp(signature(x = "double", size = "double", mu = "double"),
' return wrap(R::dnbinom_mu( as<double>x, as<double>size, as<double>mu, as<int>1)); ')
## equivalent shorter form using rcpp()
fx <- rcpp(signature(x = "double", size = "double", mu = "double"),
' return wrap(R::dnbinom_mu( as<double>(x), as<double>(size), as<double>(mu), as<int>(1)); ')
## equivalent shorter form using rcpp()
fx <- rcpp(signature(x = "double", size = "double", mu = "double"),
' return wrap(R::dnbinom_mu( 4.0, 1.0, 4.0, 1)); ')
fx(1,1)
fx(1,1,1)
## equivalent shorter form using rcpp()
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 1.0, 4.0, 1)); ')
fx()
dnbinom
?dnbinom
## equivalent shorter form using rcpp()
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 10.0, 4.0, 0)); ')
fx()
## equivalent shorter form using rcpp()
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 10.0, 0.5, 0)); ')
fx()
## equivalent shorter form using rcpp()
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.49, 0.7, 0)); ')
fx()
## equivalent shorter form using rcpp()
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.49, 0.1, 0)); ')
fx()
dnbinom(x=4,size=0.5,mu=1,1)
dnbinom(x=4,size=0.5,mu=1,prob=1)
dnbinom(x=4,size=0.5,mu=1,log=TRUE)
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.5, 1, 0)); ')
fx()
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.5, 1, 1)); ')
fx()
dnbinom(x=4,size=0.5,mu=1,log=TRUE)
fx()
fx <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.5, 1.0, 1)); ')
fx()
dnbinom(x=4,size=0.5,mu=1,log=TRUE)
fx <- rcpp(signature(),
' return wrap(R::dnbinom( 4.0, 0.5, 1.0, 1)); ')
fx()
#[1] -Inf
dnbinom(x=4,size=0.5,mu=1,log=TRUE)
#[1] -3.467849
dnbinom
rcpp_dnbinom <- rcpp(signature(),
' return wrap(R::dnbinom( 4.0, 0.5, 1.0, 1)); ')
rcpp_dnbinom()
rcpp_dnbinom_mu <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.5, 1.0, 1)); ')
rcpp_dnbinom_mu()
#[1] -Inf
dnbinom(x=4,size=0.5,mu=1,log=TRUE)
#[1] -3.467849
dnbinom(x=4,size=0.5,prob=1,log=TRUE)
rcpp_dnbinom()
rcpp_dnbinom <- rcpp(signature(),
' return wrap(R::dnbinom( 4.0, 0.5, 1.0, 1)); ')
rcpp_dnbinom()
#[1] -Inf
rcpp_dnbinom_mu <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.5, 1.0, 1)); ')
rcpp_dnbinom_mu()
rcpp_dnbinom()
rcpp_dnbinom_mu()
rcpp_dnbinom <- rcpp(signature(),
' return wrap(R::dnbinom( 4.0, 0.5, 1.0, 1)); ')
rcpp_dnbinom()
rcpp_dnbinom <- rcpp(signature(),
' return wrap(R::dnbinom( 4.0, 0.5, 0.9, 1)); ')
rcpp_dnbinom()
#[1] -Inf
rcpp_dnbinom_mu <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.5, 0.9, 1)); ')
rcpp_dnbinom_mu()
#[1] -3.467849
rcpp_dnbinom()
rcpp_dnbinom_mu()
dnbinom(x=4,size=0.5,mu=0.9,log=TRUE)
dnbinom(x=4,size=0.5,prob=0.9,log=TRUE)
library(GLMMF)
dat = read.csv("born.csv")
Y = dat[,-(1:4)]
X = dat[,2:4] #remove id column
#remove rare species:
Y = as.matrix(Y[,apply(Y>0,2,sum)>10])
Xdat<-do.call(rbind, replicate(ncol(Y), X, simplify=FALSE)) # 5069  3
species<-rep(colnames(Y),each=nrow(Y))
borneodata<-data.frame(c(Y),Xdat,species)
names(borneodata)<-c("abundance",colnames(Xdat),"species")
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
rcpp_dnbinom <- rcpp(signature(),
' return wrap(R::dnbinom( 4.0, 0.5, 0.9, 1)); ')
rcpp_dnbinom()
#[1] -10.5597
rcpp_dnbinom_mu <- rcpp(signature(),
' return wrap(R::dnbinom_mu( 4.0, 0.5, 0.9, 1)); ')
rcpp_dnbinom_mu()
#[1] -10.5597
rcpp_dnbinom_sugar <- rcpp(signature(y="numeric"),
' NumericVector x = NumericVector(y);
NumericVector res = dnbinom( x, 0.5, 0.9,1);
return wrap(res); ')
rcpp_dnbinom_mu_sugar(y=4.0)
rcpp_dnbinom_mu_sugar <- rcpp(signature(y="numeric"),
' NumericVector x = NumericVector(y);
NumericVector res = dnbinom_mu( x, 0.5, 0.9,1);
return wrap(res); ')
rcpp_dnbinom_mu_sugar(y=4.0)
rcpp_dnbinom()
rcpp_dnbinom_mu()
rcpp_dnbinom_sugar(y=4.0)
rcpp_dnbinom_mu_sugar(y=4.0)
library(GLMMF)
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
library(GLMMF)
dat = read.csv("born.csv")
Y = dat[,-(1:4)]
X = dat[,2:4] #remove id column
#remove rare species:
Y = as.matrix(Y[,apply(Y>0,2,sum)>10])
Xdat<-do.call(rbind, replicate(ncol(Y), X, simplify=FALSE)) # 5069  3
species<-rep(colnames(Y),each=nrow(Y))
borneodata<-data.frame(c(Y),Xdat,species)
names(borneodata)<-c("abundance",colnames(Xdat),"species")
set.seed(12345)
randu1<-rnorm(37)
randu2<-rnorm(37)
fitinit<-glmmf(group="species",response="abundance",distinct=~randu1+randu2,
nfactors=0,distribution="negative binomial",maxiter=1,
data=borneodata,control=list(trace=1,REPORT=1),method="BFGS",trace=2,estimate=F)
fitinit$log #-8241.699
