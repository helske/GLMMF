{
    "contents" : "#' Fit Generalized Linear Mixed-Effects Models with Latent Factors Using State Space Framework\n#'\n#' Function \\code{glmmf} estimates GLMM with latent factors using methods based on state space modelling. \n#'\n#' @export\n#' @import MASS\n#' @import KFAS\n#' @importFrom Rcpp evalCpp\n#' @useDynLib GLMMF\n#' @param group Name of the grouping variable in data. \n#' Only one grouping variable is allowed and the group sizes must be equal. In case of unequal group sizes, \n#' patch missing rows with NA's.\n#' @param response Name of the response variable in data.\n#' @param common.fixed formula for common fixed effects. LHS of the formula is ignored if present.\n#' @param distinct.fixed Formula for distinct fixed effects i.e. each group has separate regression \n#' coefficient. This formula cannot contain variables which are already present in \n#' \\code{common.fixed} or \\code{random} formulas, as in that case the model would not be identifiable. \n#' LHS of the formula is ignored if present.\n#' @param random Formula for random effects. LHS of the formula is ignored if present.\n#' @param data Data frame containing the variables in the model. Must contain all variables used formulas and \n#' variables defined in \\code{group} and \\code{response}\n#' @param distribution Character vector defining the distributions used for each group. \n#' Either length of one (same distribution for all groups) or length of p, number of groups. Default is \"gaussian\".\n#' @param init.random Initial values for random effect covariances.\n#' @param init.dispersion Initial values for dispersion paremeters for Gaussian, negative binomial and Gamma distributions.\n#' @param correlating.effects Logical. Default is TRUE.\n#' @param nsim Integer. Number of independent samples used in importance sampling. \n#' Default is 0, which corresponds to Laplace approximation. Not yet implemented.\n#' @param maxiter Integer. Number of iterations for in iterative weighted least squares.\n\nglmmf<-\n  function(group,response,common.fixed,distinct.fixed,random,nfactors=0,data,\n           distribution=c(\"gaussian\", \"poisson\", \"binomial\", \"gamma\", \"negative binomial\"),\n           u, correlating.effects=TRUE, common.dispersion=TRUE, init.random.cov, init.dispersion, init.factor,\n           nsim=0, return.model=TRUE,maxiter=50,convtol=1e-8,estimate=TRUE,tol=.Machine$double.eps^0.5,...){\n    \n    distribution<-match.arg(distribution)\n    estimate.dispersion <- distribution%in%c(\"gaussian\",\"negative binomial\",\"gamma\")\n    \n    if(missing(init.dispersion) && estimate.dispersion){      \n      \n      init.dispersion<-\n        switch(distribution,\n               \"gaussian\" = {\n                 if(!missing(common.fixed)){\n                   tmpf<-formula(paste(response,paste(common.fixed,collapse=\"\")))\n                 } else tmpf<-formula(paste(response,\"~1\"))       \n                 summary(glm(tmpf,data=data,family=gaussian))$dispersion\n               },\"negative binomial\" = {\n                 if(!missing(common.fixed)){\n                   tmpf<-formula(paste(response,paste(common.fixed,collapse=\"\")))\n                 } else tmpf<-formula(paste(response,\"~1\"))       \n                 glm.nb(tmpf,data=data)$theta\n               },\"gamma\"= {\n                 if(!missing(common.fixed)){\n                   tmpf<-formula(paste(response,paste(common.fixed,collapse=\"\")))\n                 } else tmpf<-formula(paste(response,\"~1\"))       \n                 summary(glm(tmpf,data=data,family=Gamma(link=\"log\")))$dispersion\n               })\n      \n    }\n    \n    model<-buildGLMMF(group=group,response=response,common.fixed=common.fixed,\n                      distinct.fixed=distinct.fixed,random=random,nfactors=nfactors,data=data,\n                      u=u,distribution=distribution,tol=tol,random.cov=init.random.cov,factors=init.factor)\n    \n    \n    \n    res<-fitGLMMF(model=model,estimate.dispersion=estimate.dispersion,common.dispersion=common.dispersion,\n                  correlating.effects=correlating.effects,maxiter=maxiter,convtol=convtol,\n                  init.random.cov=init.random.cov,init.dispersion=init.dispersion,\n                  init.factor=init.factor,estimate=estimate,...)    \n    model<-res$model\n    \n    \n    theta <- KFAS:::init_theta(model$y, model$u, rep(model$distribution,ncol(model$y))) \n    dist<-rep(pmatch(x = model$distribution, \n                     table = c(\"gaussian\", \"poisson\", \"binomial\", \n                               \"gamma\", \"negative binomial\")),ncol(model$y))\n    out<-filterNoSim(model$y, model$Z, model$u, model$a1, model$P1, model$P1inf, dist, \n                     model$tol, maxiter, convtol, theta, model$Zind, model$nfactors)\n    if(out$conv<0){\n      stop(paste(\"Approximating algorithm did not converge. Error code \",out$conv))      \n    }\n    # results<-list(fi\n    \n    #     results<-list(fixed=list(coef=coef(kfs.out,1,1)[1:k.fix],V_fixed=kfs.out$V[1:k.fix,1:k.fix,1]),\n    #                   random=if(k.rand>0) list(effects=coef(kfs.out,1,1)[-(1:k.fix)],V_random=kfs.out$V[-(1:k.fix),-(1:k.fix),1],\n    #                                            P=model$P1[(k.fix+1):(k.fix+k.rand),(k.fix+1):(k.fix+k.rand)]) else NULL,\n    #                   factors=if(latent.factors>0) list(gamma=model$Z[,(ncol(model$Z)-latent.factors+1):ncol(model$Z),1],\n    #                                                     u=coef(kfs.out)[,(ncol(model$Z)-latent.factors+1):ncol(model$Z)],\n    #                                                     V=kfs.out$V[(ncol(model$Z)-latent.factors+1):ncol(model$Z),\n    #                                                                 (ncol(model$Z)-latent.factors+1):ncol(model$Z),]) else NULL,\n    #                   fitted=list(fitted=kfs.out$mu,V=kfs.out$V_muhat),\n    #                   dispersions=model$u[1,],logLik=ll,\n    #                   call= match.call(expand.dots = FALSE), model=if(return.model) model else NULL)\n    results<-c(out,res)\n    class(results)<-\"glmmf.results\"\n    results\n    \n    \n    \n  }",
    "created" : 1413809072622.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3172762700",
    "id" : "F7F479E4",
    "lastKnownWriteTime" : 1414137330,
    "path" : "U:/MyPrograms/gitrepos/GLMMF/R/glmmf.R",
    "project_path" : "R/glmmf.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}