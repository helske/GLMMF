{
    "contents" : "#' Build Generalized Linear Mixed-Effects Model with Latent Factors\n#'\n#' Function \\code{buildGLMMF} builds GLMM with latent factors using methods based on state space modelling. \n#'\n#' @param group Name of the grouping variable in data. \n#' Only one grouping variable is allowed and the group sizes must be equal. In case of unequal group sizes, \n#' patch missing rows with NA's.\n#' @param response Name of the response variable in data.\n#' @param common.fixed formula for common fixed effects. LHS of the formula is ignored if present.\n#' @param distinct.fixed Formula for distinct fixed effects i.e. each group has separate regression \n#' coefficient. This formula cannot contain variables which are already present in \n#' \\code{common.fixed} or \\code{random} formulas, as in that case the model would not be identifiable. \n#' LHS of the formula is ignored if present.\n#' @param random Formula for random effects. LHS of the formula is ignored if present.\n#' @param data Data frame containing the variables in the model. Must contain all variables used formulas and \n#' variables defined in \\code{group} and \\code{response}\n#' @param distribution Character. Possible values are \"gaussian\", \"poisson\", \n#' \"binomial\", \"negative binomial\" and \"gamma\". Default is \"gaussian\".\nbuildGLMMF<-\n  function(group,response,common.fixed,distinct.fixed,random,nfactors=0,data,\n           distribution=c(\"gaussian\", \"poisson\", \"binomial\", \"gamma\", \"negative binomial\"),\n           u,random.cov,factors,tol=.Machine$double.eps^0.5){\n    \n    distribution<-match.arg(distribution)\n    \n    splitdata<-split(data,data[,group])\n    if(length(unique(sapply(splitdata,nrow))) != 1)\n      stop(\"Need balanced group sizes. Patch data frame with NAs.\")\n    \n    model<-NULL\n    \n    model$call <- match.call(expand.dots = FALSE)\n    \n    \n    if(!missing(common.fixed)){\n      common_mm<-sapply(1:length(splitdata), function(i) model.matrix(common.fixed,data=splitdata[[i]]),simplify=\"array\")\n      ncommon<-dim(common_mm)[2]\n      model$terms.common <- terms(common.fixed, data = data)\n    } else {\n      ncommon<-0\n      common_mm<-NULL\n    }\n    if(!missing(random)){\n      random_mm<-sapply(1:length(splitdata), function(i) model.matrix(random,data=splitdata[[i]]),simplify=\"array\") \n      nrandom<-dim(random_mm)[2]\n      model$terms.random <- terms(random, data = data)\n    } else {\n      nrandom <-0\n      random_mm <- NULL\n    }\n    if(!missing(distinct.fixed)){\n      distinct_mm<-sapply(1:length(splitdata), function(i) model.matrix(distinct.fixed,data=splitdata[[i]]),simplify=\"array\")\n      ndistinct<-dim(distinct_mm)[2]\n      if(!missing(common.fixed) && attr(terms(distinct.fixed),\"term.labels\")%in% attr(terms(common.fixed),\"term.labels\"))\n        stop(\"Model is not identifiable, variables in distinct.fixed also present in  common.fixed formula.\")\n      if(!missing(random) && attr(terms(distinct.fixed),\"term.labels\")%in% attr(terms(random),\"term.labels\"))\n        stop(\"Model is not identifiable, variables in distinct.fixed also present in random formula.\")\n      model$terms.distinct <- terms(distinct.fixed, data = data)\n    } else {\n      ndistinct<-0\n      distinct_mm<-NULL\n    }\n    \n    if(nfactors>0){\n      if(missing(factors)){\n        factors<-matrix(NA,length(splitdata),nfactors)\n        factors[upper.tri(factors)]<-0  \n      } else {\n        if(!identical(dim(factors),c(length(splitdata),as.integer(nfactors)))){\n          stop(\"Dimensions of the latent factor matrix is not equal to p*nfactors.\")\n        }\n      }\n    } else factors<-NULL\n    \n    y<-sapply(1:length(splitdata), function(i) splitdata[[i]][,response],simplify=\"matrix\")\n    storage.mode(y)<-\"double\"\n    \n    p<-ncol(y)\n    n<-nrow(y)\n    \n  \n    \n    if(missing(u)){\n      u<-matrix(1,n,p)\n    } else {      \n      if(length(u)==p | length(u)==1 | identical(dim(u), c(n, p))){\n        u <- matrix(u, n, p, byrow = is.vector(u))\n        storage.mode(u) <- \"double\"\n      }else {\n        stop(\"Mispecified u, argument u must be either length 1 or p, or a n x p matrix,\n          where p is the number of groups and n is the group size.\")\n      }\n    }\n    m<-nfactors+ncommon+p*ndistinct+p*nrandom\n    \n    \n    P1<-diag(c(rep(1,nfactors),rep(0,ncommon+p*ndistinct),rep(1,p*nrandom)))\n    if(!missing(random.cov)){\n      if(!identical(dim(random.cov),c(nrandom,nrandom)))\n        stop(\"Dimensions of the covariance matrix random.cov of random effects does not match with number of random effects.\")\n      P1[nfactors+ncommon+p*ndistinct+1:(p*nrandom),nfactors+ncommon+p*ndistinct+1:(p*nrandom)]<-\n        as.matrix(.bdiag(replicate(p,random.cov,simplify=FALSE)))\n      \n    }\n    \n    #if(nrandom>0)\n    #  P1[nfactors+ncommon+p*ndistinct+1:nrandom,nfactors+ncommon+p*ndistinct+1:nrandom]<-NA\n    P1inf<-diag(c(rep(0,nfactors),rep(1,ncommon+p*ndistinct),rep(0,p*nrandom)))\n    \n    \n    m1<-nfactors+ncommon+ndistinct+nrandom\n    Z <- array(0,c(n,m1,p))\n    Zind <- matrix(0,m1,p)\n    tmp<-NULL\n    for(i in 1:p){\n      if(nfactors>0)\n        tmp <- matrix(rep(factors[i,],n),ncol=nfactors,byrow=TRUE)\n      Z[,,i]<-cbind(tmp,common_mm[,,i],distinct_mm[,,i],random_mm[,,i]) ##tÃ¤nne nimet!!!\n      Zind[,i]<-c(seq(from=1,to=nfactors+ncommon,length=nfactors+ncommon),\n                  seq(from=nfactors+ncommon+1+(i-1)*ndistinct,to=nfactors+ncommon+i*ndistinct,length=ndistinct),\n                  seq(from=nfactors+ncommon+p*ndistinct+1+(i-1)*nrandom,\n                      to=nfactors+ncommon+p*ndistinct+i*nrandom,length=nrandom))\n    }\n\n    model<-c(model,list(y=y,Z=aperm(Z,c(2,3,1)),Zind=Zind-1,a1=rep(0,m),P1=P1,P1inf=P1inf,\n                        distribution=distribution,u=u,ncommon=ncommon,ndistinct=ndistinct,\n                        nrandom=nrandom,nfactors=nfactors,tol=tol))\n    \n    class(model)<-\"GLMMFmodel\"\n    model\n  }",
    "created" : 1413808847378.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2589931701",
    "id" : "91F64082",
    "lastKnownWriteTime" : 1413837206,
    "path" : "U:/MyPrograms/gitrepos/GLMMF/R/buildGLMMF.R",
    "project_path" : "R/buildGLMMF.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}